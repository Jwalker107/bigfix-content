<?xml version="1.0"?>
<!-- vim: set syntax=xml: -->
<BES>
  <Wizard>
    <Title>Custom - IE11 Dashboard Template</Title>
    <UIHooks LaunchType="Document" RequiresAuthoring="false" Menu="Dashboards"></UIHooks>
    <DefaultPage>JavascriptDebugging</DefaultPage>
    <Page Name="JavascriptDebugging" DocType="HTML5" >
        <Title>IE11 Dashboard Template</Title>
        <Head><![CDATA[
            <meta http-equiv="X-UA-Compatible" content="IE=11">
            <script src="C:\Program Files (x86)\BigFix Enterprise\BES Console\reference\common.js"></script>
            <noscript>
        ]]></Head>
        <HTML><![CDATA[
</noscript>
<h2>IE11 Dashboard Template</h2>
<h3><span>IE DocumentMode:</span>
<span id="resultDocMode">detectingâ€¦</span></h3>

<script language="javascript">
// get the IE effective documentMode
document.getElementById('resultDocMode').innerHTML = document.documentMode;
</script>

<script>
// The following code from `wizards.js` is modified slightly for IE11 compatibility
//  - Location: C:\Program Files (x86)\BigFix Enterprise\BES Console\reference\wizards.js
//  - Reference: https://forum.bigfix.com/t/issues-with-console-dashboards-and-internet-explorer-versions-wizards-js-ie11-incompatibility/19790/6
function InsertUtilityDiv() {
    if (window.document.getElementsByName("TheUtilityScripts").length == 0) {
        var tus = '<div id="TheUtilityScripts" style="DISPLAY: none; LEFT: 0px; POSITION: absolute; TOP: 100%">';
        tus += '<div id="ActivateAnalysisData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonActivateAnalysis" type="button">Activate</BUTTON>';
        tus += '    <div id="theActivateAnalysisIDList"></div>';
        tus += '	<div id="theActivateAnalysisReactivateFlag"></div>';
        tus += '	<div id="theActivateAnalysisDeactivateFlag"></div>';
        tus += '	<div id="theActivateAnalysisSuccessFlag"></div>';
        tus += '</div>';
        tus += '<div id="StopActionData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonStopAction" type="button">StopAction</BUTTON>';
        tus += '    <div id="theStopActionIDList"></div>';
        tus += '	<div id="theStopActionSuccessFlag"></div>';
        tus += '	<div id="theSuppressWarningsFlag"></div>';
        tus += '</div>';
        tus += '<div id="RegisterRefreshHandlerData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonRegisterRefreshHandler" type="button">RegisterRefresh</BUTTON>';
        tus += '	<div id="theRegisterRefreshElementID"></div>';
        tus += '	<div id="theRegisterRefreshSignalName"></div>';
        tus += '</div>';
        tus += '<div id="BrowseData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonBrowse" type="button">Browse</BUTTON>';
        tus += '	<div id="theBrowseExtension"></div>';
        tus += '	<div id="theBrowseFilters"></div>';
        tus += '	<div id="theBrowseForFolderFlag"></div>';
        tus += '	<div id="theBrowseInitialPath"></div>';
        tus += '	<div id="theBrowseFileMustExistFlag"></div>';
        tus += '	<div id="theBrowsePathMustExistFlag"></div>';
        tus += '	<div id="theBrowseNoValidateFlag"></div>';
        tus += '	<div id="theBrowseHideReadOnlyFlag"></div>';
        tus += '	<div id="theBrowseOverwritePromptFlag"></div>';
        tus += '	<div id="theBrowseCreatePromptFlag"></div>';
        tus += '	<div id="theBrowseNoReadOnlyReturnFlag"></div>';
        tus += '	<div id="theBrowseNoTestFileCreateFlag"></div>';
        tus += '	<div id="theBrowseAllowMultiSelectFlag"></div>';
        tus += '	<div id="theBrowseResultCancelFlag"></div>';
        tus += '	<div id="theBrowseResultFullPath"></div>';
        tus += '</div>';
        tus += '<div id="LoadPresentationData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonLoadPresentation" type="button">LoadPresentation</BUTTON>';
        tus += '	<xml id="thePresentationPath"></xml>';
        tus += '	<xml id="thePresentationResult"></xml>';
        tus += '</div>';
        tus += '<div id="ScratchFileOpsData" style="DISPLAY: none">';
        tus += '	<BUTTON id="ButtonScratchFileOps" type="button">ScratchFileOps</BUTTON>';
        tus += '	<xml id="theScratchFileOperation"></xml>';
        tus += '	<xml id="theScratchFileInputPath"></xml>';
        tus += '	<xml id="theScratchFileOutputPath"></xml>';
        tus += '	<xml id="theScratchFileRecurseFlag"></xml>';
        tus += '	<xml id="theScratchFileResult"></xml>';
        tus += '</div>';
        tus += '<div id="ConnectionInfoData" style="DISPLAY: none">';
        tus += '	<BUTTON id="GetConnectionInfo" type="button">GetConnectionInfo</BUTTON>';
        tus += '	<div id="theConnectionInfoCurrentDSN"></div>';
        tus += '	<div id="theConnectionInfoCurrentUser"></div>';
        tus += '</div>';
        tus += '</div>';
        //alert("InsertUtilityDiv");
        window.document.body.insertAdjacentHTML("afterBegin", tus);
    }
}

//window.attachEvent("onload", InsertUtilityDiv);
window.addEventListener("load", InsertUtilityDiv);

function BESFixletID(sid, fid) {
    this.SiteID = sid;
    this.FixletID = fid;
    this.toString = BESFixletIDToString;
}
function BESFixletIDToString() {
    return this.SiteID + ":" + this.FixletID;
}
function MakeIDListFromArray(idArray) {
    var idList = idArray[0];
    var index = 1;
    while (index < idArray.length) {
        idList += "," + idArray[index++];
    }
    return idList;
}
function ActivateAnalysis(analysisID) {
    InsertUtilityDiv();
    var idArray = new Array(1);
    idArray[0] = analysisID;
    return ActivateAnalyses(idArray);
}
function ActivateAnalyses(analysisIDArray) {
    InsertUtilityDiv();
    theActivateAnalysisIDList.innerText = MakeIDListFromArray(analysisIDArray);
    theActivateAnalysisReactivateFlag.innerText = "0";
    theActivateAnalysisDeactivateFlag.innerText = "0";
    ButtonActivateAnalysis.click();
    return (theActivateAnalysisSuccessFlag.innerText == "1");
}
function ReactivateAnalysis(analysisID) {
    InsertUtilityDiv();
    var idArray = new Array(1);
    idArray[0] = analysisID;
    return ReactivateAnalyses(idArray);
}
function ReactivateAnalyses(analysisIDArray) {
    InsertUtilityDiv();
    theActivateAnalysisIDList.innerText = MakeIDListFromArray(analysisIDArray);
    theActivateAnalysisReactivateFlag.innerText = "1";
    theActivateAnalysisDeactivateFlag.innerText = "0";
    ButtonActivateAnalysis.click();
    return (theActivateAnalysisSuccessFlag.innerText == "1");
}
function DeactivateAnalysis(analysisID) {
    InsertUtilityDiv();
    var idArray = new Array(1);
    idArray[0] = analysisID;
    return DeactivateAnalyses(idArray);
}
function DeactivateAnalyses(analysisIDArray) {
    InsertUtilityDiv();
    theActivateAnalysisIDList.innerText = MakeIDListFromArray(analysisIDArray);
    theActivateAnalysisReactivateFlag.innerText = "0";
    theActivateAnalysisDeactivateFlag.innerText = "1";
    ButtonActivateAnalysis.click();
    return (theActivateAnalysisSuccessFlag.innerText == "1");
}
function StopAction(actionID, options) {
    InsertUtilityDiv();
    var idArray = new Array(1);
    idArray[0] = actionID;
    return StopActions(idArray, options);
}
function StopActions(actionIDArray, options) {
    InsertUtilityDiv();
    theSuppressWarningsFlag.innerText = options && options.suppressWarnings ? "1" : "0";

    theStopActionIDList.innerText = MakeIDListFromArray(actionIDArray);
    ButtonStopAction.click();
    return (theStopActionSuccessFlag.innerText == "1");
}

function ImportXML(xml, openDocuments, siteName, computerIDs) {
    if (openDocuments == undefined)
        openDocuments = true;
    var result = external.ImportXML(xml, openDocuments, siteName, computerIDs);
    if (result == undefined)
        return result;
    else if (result.toArray)
        return result.toArray();
    else
        return result;
}

function ImportXMLToSite(xml, siteName, openDocuments) {
    return ImportXML(xml, openDocuments, siteName);
}

function EvaluateRelevance(expr) {
    var result = external.EvaluateRelevance(expr);
    if (result.toArray)
        return result.toArray();
    else
        return result;
}

function Relevance(expr, callback) {
    if (callback) {
        external.EvaluateRelevanceAsync(expr, callback.success, callback.failure, "");
    }
    else {
        return external.Relevance(expr);
    }
}

function RegisterRelevance(expr, callback, id) {
    external.EvaluateRelevanceAsync(expr, callback.success, callback.failure, id);
}

function BooleanToText(flag) {
    if (flag) { return "1"; }
    return "0";
}

function DoBrowseDialogWithFlags(extension, filters,
	forFolderFlag, initialPath,
	fileMustExistFlag, pathMustExistFlag,
	noValidateFlag, hideReadOnlyFlag,
	overwritePromptFlag, createPromptFlag,
	noReadOnlyReturnFlag, noTestFileCreateFlag,
	allowMultiSelectFlag) {
    InsertUtilityDiv();
    theBrowseExtension.innerText = extension;
    theBrowseFilters.innerText = filters;
    theBrowseForFolderFlag.innerText = BooleanToText(forFolderFlag);
    theBrowseInitialPath.innerText = initialPath;
    theBrowseFileMustExistFlag.innerText = BooleanToText(fileMustExistFlag);
    theBrowsePathMustExistFlag.innerText = BooleanToText(pathMustExistFlag);
    theBrowseNoValidateFlag.innerText = BooleanToText(noValidateFlag);
    theBrowseHideReadOnlyFlag.innerText = BooleanToText(hideReadOnlyFlag);
    theBrowseOverwritePromptFlag.innerText = BooleanToText(overwritePromptFlag);
    theBrowseCreatePromptFlag.innerText = BooleanToText(createPromptFlag);
    theBrowseNoReadOnlyReturnFlag.innerText = BooleanToText(noReadOnlyReturnFlag);
    theBrowseNoTestFileCreateFlag.innerText = BooleanToText(noTestFileCreateFlag);
    theBrowseAllowMultiSelectFlag.innerText = BooleanToText(allowMultiSelectFlag);
    ButtonBrowse.click();
    if (theBrowseResultCancelFlag.innerText != "1") {
        return theBrowseResultFullPath.innerText;
    }
    return "";
}

function BrowseForFile(extension, filters, initialPath) {
    if (extension == "") { extension = "*.*"; }
    if (filters == "") { filters = "All Files (*.*)||"; }
    return DoBrowseDialogWithFlags(extension, filters, false, initialPath,
		false, false,
		false, false,
		false, false,
		false, false,
		false);
}

function BrowseForFolder(initialPath) {
    return DoBrowseDialogWithFlags("", "", true, initialPath,
		false, false,
		false, false,
		false, false,
		false, false,
		false);
}

function RegisterRefreshHandler(elementID, signalName) {
    InsertUtilityDiv();
    theRegisterRefreshElementID.innerText = elementID;
    theRegisterRefreshSignalName.innerText = signalName;
    ButtonRegisterRefreshHandler.click();
}

function LoadPresentation(path) {
    InsertUtilityDiv();
    thePresentationPath.innerHTML = path;
    ButtonLoadPresentation.click();
    return thePresentationResult.innerHTML;
}

function GetScratchRootPath() {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "GetRootPath";
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function MakeArchive(inputPath, scratchPath, recurseFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "Archive";
    theScratchFileInputPath.innerHTML = inputPath;
    theScratchFileOutputPath.innerHTML = scratchPath;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(recurseFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function CopyFile(inputPath, scratchPath, allowOverwriteFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "CopyFile";
    theScratchFileInputPath.innerHTML = inputPath;
    theScratchFileOutputPath.innerHTML = scratchPath;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(allowOverwriteFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function MoveFile(scratchPathSrc, scratchPathDest, allowOverwriteFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "MoveFile";
    theScratchFileInputPath.innerHTML = scratchPathSrc;
    theScratchFileOutputPath.innerHTML = scratchPathDest;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(allowOverwriteFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function DeleteFile(scratchPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "DeleteFile";
    theScratchFileOutputPath.innerHTML = scratchPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function DeleteAllFiles(scratchPath, recurseFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "DeleteAllFiles";
    theScratchFileOutputPath.innerHTML = scratchPath;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(recurseFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function DeleteFolder(scratchPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "DeleteFolder";
    theScratchFileOutputPath.innerHTML = scratchPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function DeleteTree(scratchPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "DeleteTree";
    theScratchFileOutputPath.innerHTML = scratchPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function MakeFolder(scratchPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "MakeFolder";
    theScratchFileOutputPath.innerHTML = scratchPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function CopyFolder(inputPath, scratchPath, recurseFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "CopyFolder";
    theScratchFileInputPath.innerHTML = inputPath;
    theScratchFileOutputPath.innerHTML = scratchPath;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(recurseFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function WriteFile(text, scratchPath, appendFlag) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "WriteFile";
    theScratchFileInputPath.innerHTML = text;
    theScratchFileOutputPath.innerHTML = scratchPath;
    theScratchFileRecurseFlag.innerHTML = BooleanToText(appendFlag);
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function UploadFile(inputPath, callback) {
    if (callback == undefined) {
        InsertUtilityDiv();
        theScratchFileOperation.innerHTML = "UploadFile";
        theScratchFileInputPath.innerHTML = inputPath;
        ButtonScratchFileOps.click();
        return theScratchFileResult.innerHTML;
    } else {
        var response = { url: null, size: null, sha1: null, sha256: null, error: null, referenceID: null };
        callback.success = callback.success || function () {};
        callback.failure = callback.failure || function () {};
        external.UploadFile(
            inputPath, 
            function (resp) {
                resp.size = parseInt(resp.size);
                resp.referenceID = parseInt(resp.referenceID);
                callback.success(resp);
            },
            callback.failure,
            response);
    }
}

function UploadFileWithName(inputPath, outputPath, callback) {
    if (callback == undefined) {
        InsertUtilityDiv();
        theScratchFileOperation.innerHTML = "UploadFileWithName";
        theScratchFileInputPath.innerHTML = inputPath;
        theScratchFileOutputPath.innerHTML = outputPath;
        ButtonScratchFileOps.click();
        return theScratchFileResult.innerHTML;
    } else {
        var response = { url: null, size: null, sha1: null, sha256: null, error: null, referenceID: null };
        callback.success = callback.success || function () { };
        callback.failure = callback.failure || function () { };
        external.UploadFileWithName(
            inputPath,
            outputPath,
            function (resp) {
                resp.size = parseInt(resp.size);
                resp.referenceID = parseInt(resp.referenceID);
                callback.success(resp);
            },
            callback.failure,
            response);
    }
}

function ArchiveAndUploadFile(inputPath, outputPath, recurseFlag, callback) {
    if (callback == undefined) {
        InsertUtilityDiv();
        theScratchFileOperation.innerHTML = "ArchiveAndUploadFile";
        theScratchFileInputPath.innerHTML = inputPath;
        theScratchFileOutputPath.innerHTML = outputPath;
        theScratchFileRecurseFlag.innerHTML = BooleanToText(recurseFlag);
        ButtonScratchFileOps.click();
        return theScratchFileResult.innerHTML;
    } else {
        var response = { url: null, size: null, sha1: null, sha256: null, referenceID: null, error: null };
        callback.success = callback.success || function () {};
        callback.failure = callback.failure || function () {};
        external.ArchiveAndUploadFile(
            inputPath,
            outputPath,
            recurseFlag,
            function (resp) {
                resp.size = parseInt(resp.size);
                resp.referenceID = parseInt(resp.referenceID);
                callback.success(resp);
            },
            callback.failure,
            response);
    }
}

function ArchiveAndUploadFile2(inputPath, outputPath, recurseFlag, callback) {
    if (callback == undefined) {
        var response = { url: null, size: null, sha1: null, sha256: null, referenceID: null };
        external.ArchiveAndUploadFileSync(inputPath, outputPath, recurseFlag, response);
        response.size = parseInt(response.size);
        response.referenceID = parseInt(response.referenceID);
        return response;
    } else {
        ArchiveAndUploadFile(inputPath, outputPath, recurseFlag, callback)
    }
}

function DownloadFile(url, outputPath, callback) {
    if (callback == undefined) {
        InsertUtilityDiv();
        theScratchFileOperation.innerHTML = "DownloadFile";
        theScratchFileInputPath.innerHTML = url;
        theScratchFileOutputPath.innerHTML = outputPath;
        ButtonScratchFileOps.click();
        return theScratchFileResult.innerHTML;
    } else {
        var response = { size: null, path: null, sha1: null, sha256: null, error: null };
        callback.success = callback.success || function () {};
        callback.failure = callback.failure || function () {};
        external.DownloadFile(
            url,
            outputPath,
            function (resp) {
                resp.size = parseInt(resp.size);
                callback.success(resp);
            },
            callback.failure,
            response);
    }
}

function DownloadFileWithSHA1(url, outputPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "DownloadFileWithSHA1";
    theScratchFileInputPath.innerHTML = url;
    theScratchFileOutputPath.innerHTML = outputPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function GetFileSHA1(inputPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "GetFileSHA1";
    theScratchFileInputPath.innerHTML = inputPath;
    ButtonScratchFileOps.click();
    return theScratchFileResult.innerHTML;
}

function GetFileSize(inputPath) {
    InsertUtilityDiv();
    theScratchFileOperation.innerHTML = "GetFileSize";
    theScratchFileInputPath.innerHTML = inputPath;
    ButtonScratchFileOps.click();
    if (theScratchFileResult.innerHTML.substr(0, 7) == "Error: ") {
        return -1;
    }
    return parseInt(theScratchFileResult.innerHTML);
}

function GetCurrentDSN() {
    InsertUtilityDiv();
    GetConnectionInfo.click();
    return theConnectionInfoCurrentDSN.innerText;
}

function GetCurrentUser() {
    InsertUtilityDiv();
    GetConnectionInfo.click();
    return theConnectionInfoCurrentUser.innerText;
}

function ManualRefresh(sectionName) {
    if ((sectionName == null) || (sectionName.length == 0)) {
        sectionName = "__DRRSN";
    }
    external.ManualRefresh(sectionName);
}

function ManualRefreshAll() {
    external.ManualRefresh("");
}

function OpenComputerGroup(cids, title) {
    external.OpenComputerGroup(cids, title);
}

function SendWakeOnLANRequest(cids) {
    external.SendWakeOnLANRequest(cids);
}

function ColorizeRelevance(relevance, indent) {
    if (!document.getElementById('anUnlikelyIDForColorizationStyles')) {
        var css = external.ColorizeRelevance("", false, true);
        var style = document.createElement('style');
        style.type = 'text/css';
        style.id = 'anUnlikelyIDForColorizationStyles';
        while (css.indexOf('{') > 0) {
            var name = css.substring(0, css.indexOf('{'));
            var tags = css.substring(css.indexOf('{') + 1, css.indexOf('}'));
            style.styleSheet.addRule(name, tags);
            css = css.substring(css.indexOf('}') + 1);
        }
        document.getElementsByTagName('head')[0].appendChild(style);
    }
    var result = external.ColorizeRelevance(relevance, indent, false);
    if (indent)
        result = "<pre>" + result + "</pre>";
    return result;
}

function StoreVariable(dashboardID, name, value, isPrivate) {
    external.StoreVariable(dashboardID, name, value, isPrivate);
}

function StorePrivateVariable(dashboardID, name, value) {
    external.StorePrivateVariable(dashboardID, name, value);
}

function StoreSharedVariable(dashboardID, name, value) {
    external.StoreSharedVariable(dashboardID, name, value);
}

function DeleteVariable(dashboardID, name, isPrivate) {
    external.DeleteVariable(dashboardID, name, isPrivate);
}

function DeletePrivateVariable(dashboardID, name) {
    external.DeletePrivateVariable(dashboardID, name);
}

function DeleteSharedVariable(dashboardID, name) {
    external.DeleteSharedVariable(dashboardID, name);
}

function EditFixlet(fixletID, xml) {
    external.EditFixlet(fixletID, xml);
}

function DeleteFixlet(fixletID) {
    external.DeleteFixlet(fixletID);
}

function DeleteFixlets(fixletIDs) {
    external.DeleteFixlets(fixletIDs);
}

function DeleteProperty(propertyID) {
    external.DeleteProperty(propertyID);
}

function DeleteProperties(propertyIDs) {
    external.DeleteProperties(propertyIDs);
}

function TakeFixletAction(id, siteID, contentID, parameters, callback) {
    TakeSecureFixletAction(id, siteID, contentID, parameters, {}, callback);
}

function TakeSecureFixletAction(id, siteID, contentID, parameters, secureParameters, callback) {
    TakeSecureFixletActionOnComputers(id, siteID, contentID, parameters, secureParameters, undefined, callback);
}

function TakeFixletActionOnComputers(id, siteID, contentID, parameters, computerIDs, callback) {
    TakeSecureFixletActionOnComputers(id, siteID, contentID, parameters, {}, computerIDs, callback);
}

function TakeSecureFixletActionOnComputers(id, siteID, contentID, parameters, secureParameters, computerIDs, callback) {
    if (!parameters)
        parameters = {};
    if (!secureParameters)
        secureParameters = {};
    if (!callback)
        callback = function() {};

    if (external.ValidateFixletActionParameters(parameters) && external.ValidateFixletActionSecureParameters(secureParameters))
        external.TakeFixletAction(id, siteID, contentID, parameters, secureParameters, computerIDs, callback);
}

function OpenVisualization(xml) {
    external.OpenVisualization(xml);
}

function AddGlobalFilter(filterID) {
    external.AddGlobalFilter(filterID);
}

function ClearAllGlobalFilters() {
    external.ClearAllGlobalFilters();
}

function ClearGlobalFilterOfType(filterType) {
    external.ClearGlobalFilterOfType(filterType);
}

function EnableWakeOnLAN(enable) {
    external.EnableWakeOnLAN(enable);
}

function CreateCustomSite(siteName) {
    external.CreateCustomSite(siteName);
}

function EnableExternalSite(siteURL) {
    external.EnableExternalSite(siteURL);
}

function AddFileToMailbox(computerID, filePath, fileName) {
    external.AddFileToMailbox(computerID, filePath, fileName);
}

function AddFileToSite(siteNameStr, filePath, clientFile) {
    external.AddFileToSite(siteNameStr, filePath, clientFile);
}

function DownloadFileEx(url, filePath, hashAlgorithm) {
    return external.DownloadFileEx(url, filePath, hashAlgorithm);
}

function UploadFileEx(filePath, hashAlgorithm) {
    return external.UploadFileEx(filePath, hashAlgorithm);
}

function ArchiveAndUploadFileEx(filePath, archiveName, recurseFlag, hashAlgorithm) {
    return external.ArchiveAndUploadFileEx(filePath, archiveName, recurseFlag, hashAlgorithm);
}

function CompleteHashSet(hashAlgorithm, hashValue, callback) {
    var response = { sha1: null, sha256: null, errorCode: null, errorMessage: null };
    callback.success = callback.success || function () {};
    callback.failure = callback.failure || function () {};
    external.CompleteHashSet(hashAlgorithm, hashValue, callback.success, callback.failure, response);
}

function CalculateFileInfo(inputPath, callback) {
    if (callback == undefined) {
        var response = { size: null, sha1: null, sha256: null };
        external.CalculateFileInfoSync(inputPath, response);
        response.size = parseInt(response.size);
        return response;
    } else {
        var response = { size: null, sha1: null, sha256: null, error: null };
        callback.success = callback.success || function () {};
        callback.failure = callback.failure || function () {};
        external.CalculateFileInfo(
            inputPath, 
            function (resp) {
                resp.size = parseInt(resp.size);
                callback.success(resp);
            },
            callback.failure,
            response);
    }
}

function SiteCertificateUpdateNeeded() {
    return external.SiteCertificateUpdateNeeded();
}

var API = {
    DoRestAPIRequest: function(method, uri, options, callback) {
        if ((typeof options) == "string") {
            options = { data: options };
        }
        if (!callback) {
            callback = options;
            options = {};
        }

        external.RestAPIRequest(method, uri, options, function(errMessage, status, body) {
            var err;
            if (errMessage) {
                err = new Error(errMessage);
            }

            callback(err, status, body);
        });
    },

    Get: function(uri, options, callback) {
        API.DoRestAPIRequest( "GET", uri, options, callback);
    },

    Post: function(uri, options, callback) {
        API.DoRestAPIRequest( "POST", uri, options, callback);
    },

    Put: function(uri, options, callback) {
        API.DoRestAPIRequest( "PUT", uri, options, callback);
    },

    Delete: function(uri, options, callback) {
        API.DoRestAPIRequest( "DELETE", uri, options, callback);
    }
};

function CreateFastQuestion(applicabilityRelevance, question ) {
    return external.CreateFastQuestion(applicabilityRelevance, question );
}

function GetFastQuestionResults( questionID, outputFormat, startElement, numberOfElements,filter  ) {
    return external.GetFastQuestionResults( questionID, outputFormat, startElement, numberOfElements,filter );
}

</script>
        ]]></HTML>
        </Page>
    </Wizard>
</BES>
